module Sorting where

insertionSort :: Ord a => [a] -> [a]
insertionSort []     = []
insertionSort (x:xs) = insert x (insertionSort xs)

{- insertSort helper -}
insert :: Ord a => a -> [a] -> [a]
insert x []     = [x]
insert x (y:ys) | x < y     = x:y:ys
                | otherwise = y:(insert x ys) 

quicksort :: Ord a => [a] -> [a]
quicksort (x:xs) = quicksort smaller ++ [x] ++ quicksort greater
                   where 
                     smaller = [a | a <- xs, a <= x]
                     greater = [b | b <- xs, b > x ]
     
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = merge (mergeSort firstHalf) (mergeSort secondHalf)
              where
                firstHalf  = take ((length xs) `div` 2) xs
                secondHalf = drop ((length xs) `div` 2) xs 

merge :: Ord a => [a] -> [a] -> [a]
merge xs [] = xs
merge [] ys = ys
merge (x:xs) (y:ys) | x < y = x:(merge xs (y:ys))
                    | otherwise = y:(merge (x:xs) ys)
